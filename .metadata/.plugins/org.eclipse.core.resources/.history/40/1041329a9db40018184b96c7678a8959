package com.example.demo;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

import com.example.demo.model.Post;
import com.example.demo.service.EnqueueService;

@SpringBootApplication
public class SpringIntegrationWithRedisProducerApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringIntegrationWithRedisProducerApplication.class, args);
	}

	@Autowired
	private EnqueueService enqueueService;

	@Bean
	public CommandLineRunner runner() {
		
		return new CommandLineRunner() {
			
			Long messageCount = 0L;
			
			@Override
			public void run(String... args) throws Exception {
				Post post = new Post();
				post.setUrl("some-url");
				post.setTitle("some-title");
				post.setEmails(Arrays.asList("some@email.com", "other@email.com"));
				enqueueService.enqueue(post);
				
				ColorWr ("Publisher started");

				threadPoolTaskScheduler.scheduleWithFixedDelay(new Runnable() {

					@Override
					public void run() {
						customerRedisPublisher.publish(
								new Customer(messageCount, "Ivan " + messageCount, "Garcia " + messageCount,
										new Address("Uxmal", "7", "Del Valle")));
						messageCount++;
					}
				}, 5000);

			}
		};
	}

	@Bean
	public ThreadPoolTaskScheduler threadPoolTaskScheduler() {
		ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
		threadPoolTaskScheduler.setPoolSize(5);
		threadPoolTaskScheduler.setThreadNamePrefix(
				"pub-scheduler");
		return threadPoolTaskScheduler;
	}
}
